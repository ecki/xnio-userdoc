== XNIO Channels

=== Channel Listeners
The application program is notified of events on a channel by way of the http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/ChannelListener.html[`ChannelListener`] interface. A class which implements this interface is known as a _channel_ _listener_. The interface's single method, `handleEvent()`, is invoked when a specific event occurs on a channel.

By default, XNIO uses only a small number of dedicated threads to handle events. This means that in general, channel listeners are expected to run only for a brief period of time (in other words, the listener should be non-blocking). If a channel listener runs for an extended period of time, other pending listeners will be starved while the XNIO provider waits for the listener to complete, causing major performance degradation and possibly even deadlocks. If your design calls for long-running listeners, then such a listener should be implemented asynchronously using the XNIO worker thread pool (see [XNIO:Workers]). Such a configuration can simplify your design, at the cost of a slight increase in latency.

Registering a channel listener involves accessing the setter for the corresponding listener type. The setter can accept a listener, which will be stored internally, replacing any previous value, to be invoked when the listener's condition is met. The new listener value will take effect immediately. Setting a listener to `null` will cause the corresponding event to be ignored. By default, unless explicitly specified otherwise, all listeners for a channel will default to `null` and have to be set in order to receive the corresponding notification.

The `ChannelListener` interface has a type parameter which specifies what channel type the listener expects to receive. Every channel listener setter will accept a channel listener for the channel type with which it is associated; however, they will additionally accept a channel listener for any supertype of that channel type as well. This allows general-purpose listeners to be applied to multiple channel types, while also allowing special-purpose listeners which take advantage of the features of a more specific channel type.

There are several types of events for which a channel listener may be registered. Though the circumstances for each type may differ, the same interface is used for all of them. The types are:

* Readiness Events - called when a channel is ready for some type of access. Listeners should clear such events fully before returning (e.g. read the channel until no more data is available or suspend the read channel); the provider *may* or *may* *not* requeue a ready channel if the causing event is not cleared. In addition, readiness events may be _spuriously_ triggered - meaning that despite the listener being called, there is actually no corresponding ready state and executing the corresponding operation will return 0 (typically) and clear the causing event; this can happen due to the inability to determine whether a channel is ready, among other reasons. The types of readiness events are:
** Channel Readable - called when readable notifications are enabled and a call to the channel's read or receive method is expected to yield useful information. This notification type is enabled by invoking the `resumeReads` method on a readable channel, and remains enabled until explicitly disabled by invoking the `suspendReads` method. To clear this event, read from the channel until the `read()` method returns 0 or -1, or use the `suspendReads()` method.
** Channel Writable - called when writable notifications are enabled and a call to the channel's write or send method is expected to accept at least some data; a call to the channel's flush or shutdownWrites is expected to make progress or complete. This notification type is enabled by invoking the resumeWrites method on a writable channel, and is implicitly disabled once the corresponding channel listener, if any, is invoked. It can also be explicitly disabled by invoking the suspendWrites method. To clear this event, write to the channel until the `write()` method returns 0, or use the `suspendWrites()` method.
** Channel Acceptable - called when a new connection can be accepted from a server channel. Such channels will typically extend the http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/AcceptingChannel.html[`AcceptingChannel`] interface.
* Status Events - called when a one-time status change occurs on a channel. Such events are only ever triggered in response to some specific external event. The types of status events are:
** Channel Opened - called when a channel was newly created and connected to, or accepted from, a remote peer. The new channel is passed in as the argument to the listener. Such channels will typically extend the http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/ConnectedChannel.html[`ConnectedChannel`] interface.
** Channel Bound - called when a channel was newly created and bound to a local address. The new channel is passed in as the argument to the listener. Such channels will typically extend the http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/BoundChannel.html[`BoundChannel`] interface.
** Channel Closed - called when the channel is closed via the close method or via complete shutdown.

Not all event types are relevant for all channels, however most channel types will support notification for channel close events, and most channel types will have a way to register a listener for channel binding or opening, though the mechanism may vary depending on whether the channel in question is a client or server, TCP or UDP, etc.

=== Channel Blocking Modes
When using NIO, a channel may operate in a _blocking_ or _non-blocking_ fashion. Non-blocking I/O is achieved in NIO by way of _selectors_, which are essentially coordination points between multiple channels. However, this API is combersome and difficult to use; as such, XNIO does not use this facility, preferring instead the callback-based [listener system|XNIO:Channel Listeners].

An XNIO channel is always non-blocking; however, blocking I/O may be simulated by way of the `awaitReadable()` and `awaitWritable()` methods, which will block until the channel is expected to be readable or writable without blocking, or until the current thread is interrupted. The `ChannelInputStream` and `ChannelOutputStream` classes use this facility by way of a wrapper around the stream channel types with a blocking `InputStream` or `OutputStream` for compatibility with APIs which rely on these types.

Because of this mechanism, blocking and non-blocking operations can be intermixed freely and easily. One common pattern, for example, revolves around using blocking operations for write and non-blocking operations for read. Another pattern is to use blocking I/O in both directions, but only for the duration of a request. See also [the Channel Utilities section|XNIO:Channel Utilities] for additional methods which can help with intermixing blocking and non-blocking operations.

=== Stream Channels
A http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/StreamChannel.html[_stream channel_] is a type of channel which corresponds to a reliable byte stream. Stream channels extend the standard NIO readable and writable channel interfaces, meaning that many NIO classes and operations can act on them directly (and vice-versa). A stream channel which can only be read is referred to as a http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/StreamSourceChannel.html[_stream source channel_]. A stream channel which can only be written is referred to as a http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/StreamSinkChannel.html[_stream sink channel_]. A stream channel which can be both read and written is simply referred to as a "stream channel" and can behave as both a stream source and stream sink.

Stream channels can be differentiated from _message channels_ by the fact that there are no message boundaries; for example, separate writes of 30 and 20 bytes to a stream may correspond to reads of 10, 15, and 25 bytes on the remote side of the stream. For this reason, accessing a stream source channel to read from two threads concurrently may cause undefined behavior or even cause an exception to be thrown; likewise for writes on stream sink channels. Full-duplex stream channels may always be read and written from different threads at the same time.

In addition to supporting the standard simple and scatter/gather `read()` and `write()` methods, stream channels support efficient zero- or low-copy transfer methods which allow transferring data from and to other stream source and sink channels, as well as transferring data from and to file channels. On some platforms, using these methods can greatly improve throughput by moving pages directly from one device driver to the other without actually copying any data into user space. On platforms which do not support such optimizations, these methods merely provide optimal implementations of these common tasks. For more information on zero-copy transfers, see [XNIO:Zero-Copy Transfers] and [XNIO:Channel Utilities].

=== Zero-Copy Transfers
The term "zero-copy" refers to the concept of moving data between two different channels without having to copy the data to or from buffers. NIO supports "zero-copy" I/O by way of two methods on the FileChannel class: transferTo and transferFrom. These methods accept either a readable or writable channel as an argument. Since XNIO extends the NIO channels for its stream types, you can pass XNIO stream channel types directly in to these methods. However, most JDKs will, in reality, probe the given channel type and perform special optimizations for certain implementations. Because of this, passing in an XNIO channel type may yield poorer performance than the equivalent NIO channel would. To address this issue, you should use the transfer methods found on the XNIO stream channels rather than those found on file channels acquired from NIO (file channels opened via the XNIO API can execute transfers using either mechanism).

While these types of transfers are often called "zero-copy", it is not always possible on all platforms and in all circumstances to perform the associated transfer without actual copies; in general, a best effort will be made to minimize copying.

XNIO stream channels support two different "zero-copy" operations. The first type are the inverse of the transfer methods found on `FileChannel`, and are http://docs.jboss.org/xnio/3.1/api/org/xnio/channels/StreamSinkChannel.html#transferFrom(java.nio.channels.FileChannel,%20long,%20long)[`transferFrom(FileChannel,long,long)`] and http://docs.jboss.org/xnio/3.1/api/org/xnio/channels/StreamSourceChannel.html#transferTo(long,%20long,%20java.nio.channels.FileChannel)[`transferTo(long,long,FileChannel)`]. They function similarly to the their `FileChannel` equivalents. If no data is available to transfer, the method simply returns zero (even if the cause is an EOF on the source channel).

The second type of transfer are used to transfer data between two XNIO channels, and are implemented by the overloaded methods http://docs.jboss.org/xnio/3.1/api/org/xnio/channels/StreamSinkChannel.html#transferFrom(org.xnio.channels.StreamSourceChannel,%20long,%20java.nio.ByteBuffer)[`transferFrom(StreamSourceChannel,long,ByteBuffer)`] and http://docs.jboss.org/xnio/3.1/api/org/xnio/channels/StreamSourceChannel.html#transferTo(long, java.nio.ByteBuffer, org.xnio.channels.StreamSinkChannel)[`transferTo(long,ByteBuffer,StreamSinkChannel)`].

These methods function slightly differently from the `FileChannel` variants in that there is data being transferred between two non-blocking channels. Thus if the operation would block, at first it would appear to be difficult to determine whether the read side or the write side is the cause.

To solve this issue, these transfer methods accept a buffer. Upon return, if the buffer contains data, then that data must be written to the destination channel before the transfer operation can proceed (in other words the transfer is blocked on write). If the buffer is empty, then the source channel has no ready data (in other words the transfer is blocked on read). It is recommended that a direct buffer be used for this intermediary purpose.

Furthermore, this type of transfer can differentiate between a blocking condition or an EOF condition on the stream source channel; the transfer returns -1 if an EOF is encountered on the source side.

Because there are a quantity of states that must be negotiated when performing transfers, there exist channel utility methods which simplify the initiation of a zero-copy transfer and coordinate all the states for you, invoking callbacks in the event of completion or error. See [XNIO:Channel Utilities] for more information.

Finally there is a special zero-copy operation which applies to `StreamSourceChannels` called http://docs.jboss.org/xnio/3.1/api/org/xnio/channels/Channels.html#unwrap(org.xnio.channels.StreamSourceChannel,%20long)[`drain(StreamSourceChannel,long)`] which skips the given number of bytes on the given channel without actually copying any data from the source channel (in some implementations the data can be discarded directly from the channel's buffer), useful for skipping large chunks of data on an TCP input stream.

=== Message Channels
A message channel is a type of channel which supports individual framing of messages. Like stream channels, message channels come in half- and full-duplex variants, with additional subvariants for readable and writable half-duplex channels, known as http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/MessageChannel.html[`MessageChannels`], http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/ReadableMessageChannel.html[`ReadableMessageChannels`], and http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/WritableMessageChannel.html[`WritableMessageChannels`].

Writing a message to a message channel will cause the exact message to be delivered to the remote reader; the size and division of messages is preserved. This implies that when you receive a message, your buffer must be large enough to hold the entire message. In some cases this may require careful planning; there is no general facility to probe a message size before you receive it. If your receive buffer is not large enough to accommodate a whole message, the message will be truncated.

The UDP protocol is a special case of a message channel. An unconnected UDP channel sends and receives not only a message payload but also address payloads. Because of this, a plain message channel does not suffice as it only manages the payload itself. For this case, there is a special http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/MultipointMessageChannel.html[`MultipointMessageChannel`] type family, whose send and receive methods include arguments for source and destination address specification. There is also the http://docs.jboss.org/xnio/3.1/api/index.html?org/xnio/channels/MulticastMessageChannel.html[`MulticastMessageChannel`] interface to allow for multi-point message channels which are multicast-capable. 

=== Channel Timeouts

=== Accepting Channels

=== Pipe Channels

=== Socket Addresses

=== Socket Channels

=== Servers

=== File Channels

=== Assembled Channels

=== Channel Utility Types
